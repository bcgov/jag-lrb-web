#!/bin/bash

# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)
export MSYS_NO_PATHCONV=1
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

#
# Global utility functions - START
#
function echoError (){
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoWarning (){
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

function isInstalled () {
  rtnVal=$(type "$1" >/dev/null 2>&1)
  rtnCd=$?
  if [ ${rtnCd} -ne 0 ]; then
    return 1
  else
    return 0
  fi
}

function isS2iInstalled () {
  S2I_EXE=s2i
  if ! isInstalled ${S2I_EXE}; then
    echoError "The ${S2I_EXE} executable is needed and not on your path."
    echoError "It can be downloaded from here: https://github.com/openshift/source-to-image/releases"
    echoError "Make sure you extract the binary and place it in a directory on your path."
    exit 1
  fi
}

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up  - Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.
  start - Same as up

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS=""

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-jag-lrb}"
  export LOG_LEVEL=${LOG_LEVEL:-DEBUG}

  # db
  export MYSQL_ROOT_PASSWORD="admin"
  export MYSQL_DATABASE="drupal"
  export MYSQL_USER="drupal-user"
  export MYSQL_PASSWORD="drupal-pwd"
  export MYSQL_HOST="lrb-db"
  export MYSQL_PORT=3306

  # solr
  export SOLR_HOST="lrb-solr"
  export SOLR_PORT=8983
  export CORE_NAME=lrb
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
  echo -e "\nBuilding solr-base image ..."
  docker build \
    https://github.com/bcgov/openshift-solr.git#solr-8.8.1 \
    -t 'lrb-solr-base'

  echo -e "\nBuilding solr image ..."
  ${S2I_EXE} build \
    --copy \
    -e "HTTP_PROXY=${HTTP_PROXY}" \
    -e "HTTPS_PROXY=${HTTPS_PROXY}" \
    '../solr/cores' \
    'lrb-solr-base' \
    'lrb-solr'

  # Build all containers in the docker-compose file
  echo -e "\nBuilding remaining containers ..."
  echo docker-compose build $@
  docker-compose build $@
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    isS2iInstalled
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  *)
    usage
esac

popd >/dev/null
